{"version":3,"sources":["assets/images/viacheslav.gotsuliak.jpg","services/colors.js","shared/text/style.js","shared/text/index.js","services/images.js","services/texts.js","shared/avatar/index.js","shared/avatar/style.js","shared/title/index.js","shared/title/style.js","components/summary/index.js","components/summary/style.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","colors","default","lightGrey","style","big","fontSize","medium","small","black","color","Colors","gray","size","BIG","MEDIUM","SMALL","BLACK","GRAY","Text","getStyle","_classNames","_this$props","_this","props","classes","textSize","textColor","classNames","Object","defineProperty","react_default","a","createElement","className","this","value","React","Component","defaultProps","withStyles","styles","services_images","avatarPhoto","require","texts","Avatar","photo","avatar","src","avatarImage","alt","width","height","overflow","borderRadius","Title","title","shared_text","Texts","display","flexDirection","Summary","summary","side","Images","main","padding","justifyContent","flex","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b38cb9c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/viacheslav.gotsuliak.32418060.jpg\";","export default {\n  text: {\n    default: '#373D3F',\n    lightGrey: '#707C80',\n  },\n};\n","import Colors from '../../services/colors';\n\nexport default {\n  big: {\n    fontSize: 32,\n  },\n  medium: {\n    fontSize: 18,\n  },\n  small: {\n    fontSize: 12,\n  },\n  black: {\n    color: Colors.text.default,\n  },\n  gray: {\n    color: Colors.text.lightGrey,\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from 'react-jss';\nimport styles from './style.js';\n\nconst size = {\n  BIG: 'BIG',\n  MEDIUM: 'MEDIUM',\n  SMALL: 'SMALL',\n}\n\nconst color = {\n  BLACK: 'BLACK',\n  GRAY: 'GRAY',\n}\n\nclass Text extends React.Component {\n\n  static propTypes = {\n    value: PropTypes.string,\n    size: PropTypes.oneOf([size.BIG, size.MEDIUM, size.SMALL]),\n    color: PropTypes.oneOf([color.BLACK, color.GRAY])\n  }\n\n  static defaultProps = {\n    size: size.BIG,\n    color: color.BLACK,\n  }\n\n  render() {\n    return (\n      <span className={this.getStyle()}>\n        {this.props.value}\n      </span>\n    );\n  }\n\n  getStyle = () => {\n    const { classes, size:textSize, color:textColor } = this.props;\n    return classNames({\n      [classes.big]: textSize === size.BIG,\n      [classes.medium]: textSize === size.MEDIUM,\n      [classes.small]: textSize === size.SMALL,\n      [classes.black]: textColor === color.BLACK,\n      [classes.gray]: textColor === color.GRAY,\n    });\n  }\n}\n\nexport default withStyles(styles)(Text);\nexport { size, color };\n","export default {\n  avatarPhoto: require('../assets/images/viacheslav.gotsuliak.jpg'),\n};\n","export default {\n  viacheslavGotsuliak: 'Viacheslav Gotsuliak',\n  softwareEngineer: 'Software Engineer',\n};\n","import React from 'react';\nimport withStyles from 'react-jss';\nimport { string } from 'prop-types';\nimport styles from './style';\n\nclass Avatar extends React.Component {\n  static propTypes = {\n    photo: string,\n  }\n  render() {\n    const { photo, classes } = this.props;\n    return (\n      <div className={classes.avatar}>\n        <img src={photo} className={classes.avatarImage} alt=\"Avatar\" />\n      </div>\n    );\n  }\n};\n\nexport default withStyles(styles)(Avatar);\n","export default {\n  avatar: {\n    width: 200,\n    height: 200,\n    overflow: 'hidden',\n    borderRadius: '50%'\n  },\n  avatarImage: {\n    width: 200,\n  },\n};\n","import React from 'react';\nimport withStyles from 'react-jss';\nimport Text, { size, color } from '../text';\nimport Texts from '../../services/texts';\nimport styles from './style.js';\n\nclass Title extends React.Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.title}>\n        <Text value={Texts.viacheslavGotsuliak} size={size.BIG} />\n        <Text value={Texts.softwareEngineer} size={size.MEDIUM} color={color.GRAY} />\n      </div>\n    );\n  }\n};\n\nexport default withStyles(styles)(Title);\n","export default {\n  title: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n};\n","import React from 'react';\nimport withStyles from 'react-jss';\nimport Text, { size } from '../../shared/text';\nimport Images from '../../services/images';\nimport Texts from '../../services/texts';\nimport Avatar from '../../shared/avatar';\nimport Title from '../../shared/title';\nimport styles from './style.js';\n\nclass Summary extends React.Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.summary}>\n        <div className={classes.side}>\n          <Avatar photo={Images.avatarPhoto} />\n        </div>\n        <div className={classes.main}>\n          <Title />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Summary);\n","export default {\n  summary: {\n    display: 'flex',\n    flexDirection: 'row',\n    padding: 50,\n  },\n  side: {\n    width: 300,\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  main: {\n    display: 'flex',\n    flex: 1,\n  },\n};\n","import React from 'react';\nimport Summary from './components/summary';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Summary />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}